#pragma once
// autogenerated from sema.hpp.j2

#include <cstddef>
#include <cstdlib>
#include <string>

#include "context.hpp"

class FloatExprNode;
class IntegerExprNode;
class BoolExprNode;
class OrExprNode;
class AndExprNode;
class PrefixExprNode;
class BinExprNode;
class VarDeclNode;
class FnDefNode;
class FnParamNode;
class BlockNode;
class RootNode;
class AssignStNode;
class ReturnStNode;
class IfStNode;
class VarExprNode;
class FnCallExprNode;
class EmptyNode;

class SemanticAnalyzer {
  CompilerContext cc;

public:
  SemanticAnalyzer(const CompilerContext cc) : cc(cc){};
  void fatalSemaError(const std::string &msg, const size_t sourcePos);

  void analyze(FloatExprNode &astNode);
  void analyze(IntegerExprNode &astNode);
  void analyze(BoolExprNode &astNode);
  void analyze(OrExprNode &astNode);
  void analyze(AndExprNode &astNode);
  void analyze(PrefixExprNode &astNode);
  void analyze(BinExprNode &astNode);
  void analyze(VarDeclNode &astNode);
  void analyze(FnDefNode &astNode);
  void analyze(FnParamNode &astNode);
  void analyze(BlockNode &astNode);
  void analyze(RootNode &astNode);
  void analyze(AssignStNode &astNode);
  void analyze(ReturnStNode &astNode);
  void analyze(IfStNode &astNode);
  void analyze(VarExprNode &astNode);
  void analyze(FnCallExprNode &astNode);
  void analyze(EmptyNode &astNode);
};
